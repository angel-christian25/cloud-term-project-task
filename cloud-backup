Description: cloud formation for task tracker
 
Parameters:
  VpcCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"
 
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public1"
 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public2"
 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "private1"
 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "private2"
 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
 
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
 
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
 

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "todos"
      DBInstanceIdentifier: "todos"
      AllocatedStorage: 20
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      EngineVersion: "16.2"
      MasterUsername: "postgres"  # Replace with your desired master username
      MasterUserPassword: "postgres" # Use the parameter for the RDS password
      DBSubnetGroupName: !Ref DBSubnetGroup
 
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for DB"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
 
  FrontendInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PublicSubnet1
 
  FrontendInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PublicSubnet2
 
  BackendInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.medium"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PrivateSubnet1
 
  BackendInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.medium"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PrivateSubnet2
 
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "myLB"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      Type: application
 
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
 
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
 
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "TaskTrackerTargetGroup"
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
 
  connectionStringForPG2:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "connectionStringForPG2"
      Description: "Connection string for PostgreSQL"
      SecretString: '{"connectionStringForPG": "rds-endpoint"}'

  nodemailerPass2:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "nodemailerPass2"
      Description: "Password for nodemailer"
      SecretString: '{"nodemailerPass": "uybx gssa ooxy kptn"}'
      
  # Define the Lambda function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: "arn:aws:iam::975050375077:role/LabRole"  # Replace with the ARN of your existing IAM role
      Code:
        S3Bucket: email-lambda-new  # Replace with your S3 bucket name
        S3Key: Archive.zip  # Replace with the S3 key for your Lambda function code
      Runtime: nodejs20.x
      Timeout: 800  # Replace with your desired timeout

  # Define the CloudWatch Events rule
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(58 23 * * ? *)"  # Runs daily at 11:58 PM
      Description: "Schedule for triggering the Lambda function daily at 11:58 PM"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: "Target1"
      RoleArn: "arn:aws:iam::975050375077:role/LabRole"  # Use the LabRole for CloudWatch Events