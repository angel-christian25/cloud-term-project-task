WSTemplateFormatVersion: '2010-09-09'
Description: Setup for AgileTrack Application
 
Parameters:
  VpcCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"
 
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public"
 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public"
 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "private"
 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "private"
 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
 
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
 
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
 
  MySQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "agiletrackdb"
      DBInstanceIdentifier: "agiletrackdb"
      Engine: "mysql"
      EngineVersion: "8.0" # Using a supported MySQL engine version
      DBInstanceClass: "db.t3.micro" # Adjusted instance class
      AllocatedStorage: "20"
      MasterUsername: "admin"
      MasterUserPassword: "password"
      DBSubnetGroupName: !Ref DBSubnetGroup
 
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for AgileTrack MySQL DB"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
 
  FrontendInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PublicSubnet1
 
  FrontendInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PublicSubnet2
 
  BackendInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.medium"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PrivateSubnet1
 
  BackendInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.medium"
      ImageId: "ami-06f8dce63a6b60467"
      SubnetId: !Ref PrivateSubnet2
 
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "AgileTrackALB"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      Type: application
 
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for AgileTrack ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
 
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for public instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
 
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for private instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PublicSecurityGroup
 
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
 
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "AgileTrackTargetGroup"
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
 
  SecretManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "AgileTrackSecret"
      Description: "Secret for AgileTrack Application"
      SecretString: '{"DBUSERNAME":"root", "PASSWORD":"0000", "PORT":"3306", "DATABASE":"kanban", "HOST":"localhost", "SECRET_KEY":"thisisasecretkeyforcloudproject@2024"}'
 
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::730335289956:role/LabRole
      FunctionName: "agileTrackLambda"
      Code:
        S3Bucket: "agiletrack-bucket"
        S3Key: "lambda_function.zip"
      Runtime: python3.8